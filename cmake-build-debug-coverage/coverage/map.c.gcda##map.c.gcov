        -:    0:Source:/home/vstan/Documents/Dev/conix/src/map.c
        -:    0:Graph:/home/vstan/Documents/Dev/conix/cmake-build-debug-coverage/CMakeFiles/conix.dir/src/map.c.gcno
        -:    0:Data:/home/vstan/Documents/Dev/conix/cmake-build-debug-coverage/CMakeFiles/conix.dir/src/map.c.gcda
        -:    0:Runs:1
        -:    1:/* Map - Hash map
        -:    2: * Copyright (C) 2020 Stan Vlad <vstan02@protonmail.com>
        -:    3: *
        -:    4: * This file is part of xCalc.
        -:    5: *
        -:    6: * xCalc is free software: you can redistribute it and/or modify
        -:    7: * it under the terms of the GNU General Public License as published by
        -:    8: * the Free Software Foundation, either version 3 of the License, or
        -:    9: * (at your option) any later version.
        -:   10: *
        -:   11: * This program is distributed in the hope that it will be useful,
        -:   12: * but WITHOUT ANY WARRANTY; without even the implied warranty of
        -:   13: * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
        -:   14: * GNU General Public License for more details.
        -:   15: *
        -:   16: * You should have received a copy of the GNU General Public License
        -:   17: * along with this program. If not, see <https://www.gnu.org/licenses/>.
        -:   18: */
        -:   19:
        -:   20:#include <malloc.h>
        -:   21:#include <string.h>
        -:   22:
        -:   23:#include "map.h"
        -:   24:#include "list.h"
        -:   25:
        -:   26:#define STORE_SIZE 10
        -:   27:
        -:   28:#define destroyer(func) ((void (*)(void*)) func)
        -:   29:#define foreach(index, size) \
        -:   30:    for (size_t index = 0; index < size; ++index)
        -:   31:
        -:   32:typedef struct t_MapItem MapItem;
        -:   33:
        -:   34:struct t_Map {
        -:   35:    List* store[STORE_SIZE];
        -:   36:};
        -:   37:
        -:   38:struct t_MapItem {
        -:   39:    void* value;
        -:   40:    const char* key;
        -:   41:};
        -:   42:
        -:   43:static size_t map_hash(const char*);
        -:   44:static MapItem* map_item_create(const char*, void*);
        -:   45:static void map_item_destroy(MapItem*);
        -:   46:
        1:   47:extern Map* map_create(void) {
        1:   48:    return (Map*) malloc(sizeof(Map));
        1:   48-block  0
        -:   49:}
        -:   50:
        1:   51:extern void map_destroy(Map* self) {
        1:   52:    if (self) {
        1:   52-block  0
       11:   53:        foreach(index, STORE_SIZE)
        1:   53-block  0
       11:   53-block  1
       10:   54:            list_destroy(self->store[index], destroyer(map_item_destroy));
       10:   54-block  0
        1:   55:        free(self);
        1:   55-block  0
        -:   56:    }
        1:   57:}
        -:   58:
    #####:   59:extern void* map_get(Map* self, const char* key) {
    #####:   60:    List* list = self->store[map_hash(key)];
    %%%%%:   60-block  0
    #####:   61:    if (!list) return NULL;
    %%%%%:   61-block  0
    #####:   62:    list_foreach(list, MapItem* item, {
    %%%%%:   62-block  0
    %%%%%:   62-block  1
    %%%%%:   62-block  2
    %%%%%:   62-block  3
    %%%%%:   62-block  4
        -:   63:        if (!strcmp(item->key, key)) {
        -:   64:            return item->value;
        -:   65:        }
        -:   66:    })
    #####:   67:    return NULL;
    %%%%%:   67-block  0
        -:   68:}
        -:   69:
        6:   70:extern void map_put(Map* self, const char* key, void* value) {
        6:   71:    size_t id = map_hash(key);
        6:   71-block  0
        6:   72:    MapItem* target = map_item_create(key, value);
        6:   73:    if (!self->store[id]) {
        4:   74:        self->store[id] = list_create();
        4:   74-block  0
        -:   75:    }
        6:   76:    list_push(self->store[id], target);
        6:   76-block  0
        6:   77:}
        -:   78:
        6:   79:static size_t map_hash(const char* target) {
        6:   80:    return strlen(target) % STORE_SIZE;
        6:   80-block  0
        -:   81:}
        -:   82:
        6:   83:static MapItem* map_item_create(const char* key, void* value) {
        6:   84:    MapItem* item = (MapItem*) malloc(sizeof(MapItem));
        6:   85:    item->key = key;
        6:   86:    item->value = value;
        6:   87:    return item;
        6:   87-block  0
        -:   88:}
        -:   89:
    #####:   90:static void map_item_destroy(MapItem* item) {
    #####:   91:    if (item) {
    %%%%%:   91-block  0
    #####:   92:        free((void*) item->key);
    #####:   93:        free(item->value);
    #####:   94:        free(item);
    %%%%%:   94-block  0
        -:   95:    }
    #####:   96:}
