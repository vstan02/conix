        -:    0:Source:/home/vstan/Documents/Dev/conix/src/conix.c
        -:    0:Graph:/home/vstan/Documents/Dev/conix/cmake-build-debug-coverage/CMakeFiles/conix.dir/src/conix.c.gcno
        -:    0:Data:/home/vstan/Documents/Dev/conix/cmake-build-debug-coverage/CMakeFiles/conix.dir/src/conix.c.gcda
        -:    0:Runs:1
        -:    1:/* Conix - Command line interface building library
        -:    2: * Copyright (C) 2020 Stan Vlad <vstan02@protonmail.com>
        -:    3: *
        -:    4: * This file is part of Conix.
        -:    5: *
        -:    6: * Conix is free software: you can redistribute it and/or modify
        -:    7: * it under the terms of the GNU General Public License as published by
        -:    8: * the Free Software Foundation, either version 3 of the License, or
        -:    9: * (at your option) any later version.
        -:   10: *
        -:   11: * This program is distributed in the hope that it will be useful,
        -:   12: * but WITHOUT ANY WARRANTY; without even the implied warranty of
        -:   13: * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
        -:   14: * GNU General Public License for more details.
        -:   15: *
        -:   16: * You should have received a copy of the GNU General Public License
        -:   17: * along with this program. If not, see <https://www.gnu.org/licenses/>.
        -:   18: */
        -:   19:
        -:   20:#include <malloc.h>
        -:   21:#include <string.h>
        -:   22:
        -:   23:#include "conix.h"
        -:   24:#include "map.h"
        -:   25:#include "list.h"
        -:   26:
        -:   27:#define OPTION_DELIMIT ", "
        -:   28:
        -:   29:#define destroyer(func) ((void (*)(void*)) func)
        -:   30:#define tokenize(target, delimit, token, body) \
        -:   31:    { \
        -:   32:        char* token = strtok(conix_str_copy(target), delimit); \
        -:   33:        while (token) { \
        -:   34:            body; \
        -:   35:            token = strtok(NULL, delimit); \
        -:   36:        } \
        -:   37:    }
        -:   38:
        -:   39:typedef struct t_ConixInfo ConixInfo;
        -:   40:
        -:   41:struct t_Conix {
        -:   42:    const char* name;
        -:   43:    int argc;
        -:   44:    const char** argv;
        -:   45:    Map* options;
        -:   46:    List* info;
        -:   47:    size_t max_size;
        -:   48:    ConixHandler* def_handler;
        -:   49:};
        -:   50:
        -:   51:struct t_ConixInfo {
        -:   52:    const char* name;
        -:   53:    const char* description;
        -:   54:};
        -:   55:
        -:   56:static char* conix_str_copy(const char*);
        -:   57:static ConixInfo* conix_info_create(const char*, const char*);
        -:   58:
        -:   59:static void conix_help(Conix* self);
        -:   60:
        1:   61:extern Conix* conix_create(const char* app, int argc, const char** argv) {
        1:   62:    Conix* self = (Conix*) malloc(sizeof(Conix));
        1:   63:    self->name = app;
        1:   64:    self->argc = argc;
        1:   65:    self->argv = argv;
        1:   66:    self->max_size = 0;
        1:   67:    self->options = map_create();
        1:   67-block  0
        1:   68:    self->info = list_create();
        1:   69:    self->def_handler = conix_handler_create((void (*)(void*)) conix_help, self);
        -:   70:
        1:   71:    conix_add_option(self, (ConixOption) {
        -:   72:        .name = "-h, --help",
        -:   73:        .description = "Display this information",
        1:   74:        .handler = self->def_handler
        -:   75:    });
        1:   76:    return self;
        -:   77:}
        -:   78:
        1:   79:extern void conix_destroy(Conix* self) {
        1:   80:    if (self) {
        1:   80-block  0
        1:   81:        map_destroy(self->options);
        1:   81-block  0
        1:   82:        list_destroy(self->info, destroyer(conix_info_create));
        1:   83:        free(self);
        -:   84:    }
        1:   85:}
        -:   86:
        1:   87:extern void conix_run(Conix* self) {
        1:   88:    if (self) {
        1:   88-block  0
        1:   89:        if (self->argc > 1) {
        1:   89-block  0
    #####:   90:            ConixHandler* handler = (ConixHandler*) map_get(self->options, self->argv[1]);
    %%%%%:   90-block  0
        -:   91:            return handler != NULL
    #####:   92:                ? handler->handle(handler->payload)
    %%%%%:   92-block  0
    #####:   93:                : self->def_handler->handle(self->def_handler->payload);
    %%%%%:   93-block  0
    %%%%%:   93-block  1
        -:   94:        }
        1:   95:        self->def_handler->handle(self->def_handler->payload);
        1:   95-block  0
        -:   96:    }
        -:   97:}
        -:   98:
    #####:   99:extern void conix_set_default(Conix* self, ConixHandler* handler) {
    #####:  100:    if (self) {
    %%%%%:  100-block  0
    #####:  101:        self->def_handler = handler;
    %%%%%:  101-block  0
        -:  102:    }
    #####:  103:}
        -:  104:
        3:  105:extern void conix_add_option(Conix* self, ConixOption option) {
        3:  106:    if (self) {
        3:  106-block  0
        3:  107:        size_t size = strlen(option.name);
        3:  108:        if (size > self->max_size) {
        3:  108-block  0
        2:  109:            self->max_size = size;
        2:  109-block  0
        -:  110:        }
        -:  111:
        3:  112:        list_push(self->info, conix_info_create(option.name, option.description));
        3:  112-block  0
        9:  113:        tokenize(option.name, OPTION_DELIMIT, id, {
        6:  113-block  0
        9:  113-block  1
        -:  114:            map_put(self->options, id, option.handler);
        -:  115:        })
        -:  116:    }
        3:  117:}
        -:  118:
        1:  119:extern void conix_add_options(Conix* self, size_t count, ConixOption* options) {
        3:  120:    for (size_t index = 0; index < count; ++index) {
        1:  120-block  0
        3:  120-block  1
        2:  121:        conix_add_option(self, options[index]);
        2:  121-block  0
        -:  122:    }
        1:  123:}
        -:  124:
        3:  125:extern ConixHandler* conix_handler_create(void (*handle)(void*), void* payload) {
        3:  126:    ConixHandler* handler = (ConixHandler*) malloc(sizeof(ConixHandler));
        3:  127:    handler->handle = handle;
        3:  128:    handler->payload = payload;
        3:  129:    return handler;
        3:  129-block  0
        -:  130:}
        -:  131:
        9:  132:static char* conix_str_copy(const char* string) {
        9:  133:    size_t size = strlen(string) + 1;
        9:  134:    char* result = malloc(size * sizeof(char));
        9:  135:    strcpy(result, string);
        9:  136:    return result;
        9:  136-block  0
        -:  137:}
        -:  138:
        3:  139:static ConixInfo* conix_info_create(const char* name, const char* description) {
        3:  140:    ConixInfo* info = (ConixInfo*) malloc(sizeof(ConixInfo));
        3:  141:    info->name = conix_str_copy(name);
        3:  141-block  0
        3:  142:    info->description = conix_str_copy(description);
        3:  143:    return info;
        -:  144:}
        -:  145:
    #####:  146:static void conix_info_destroy(ConixInfo* info) {
    #####:  147:    if (info) {
    %%%%%:  147-block  0
    #####:  148:        free((void*) info->name);
    #####:  149:        free((void*) info->description);
    #####:  150:        free(info);
    %%%%%:  150-block  0
        -:  151:    }
    #####:  152:}
        -:  153:
        1:  154:static void conix_help(Conix* self) {
        1:  155:    printf("Usage: %s [option]\nOptions:\n", self->name);
        1:  155-block  0
        4:  156:    list_foreach(self->info, ConixInfo* item, {
        3:  156-block  0
        4:  156-block  1
        -:  157:        printf(" %*s %s\n", -(int)(self->max_size + 3), item->name, item->description);
        -:  158:    })
        1:  159:}
